import pandas as pd
import time
import boto3

# Set up the Athena client
athena_client = boto3.client(
    'athena',
    aws_access_key_id='YOUR_ACCESS_KEY',
    aws_secret_access_key='YOUR_SECRET_KEY',
    region_name='ap-south-1'
)

# Set up parameters
database = 'default'  # Athena database
s3_output = 's3://aws-athena-query-results-YOUR_ACCOUNT_ID-ap-south-1/external-queries-results'  # S3 bucket to store query results

# Read the SQL query from a file
with open('query.sql', 'r') as file:
    query_string = file.read()

# Start query execution
response = athena_client.start_query_execution(
    QueryString=query_string,
    QueryExecutionContext={
        'Database': database
    },
    ResultConfiguration={
        'OutputLocation': s3_output,
    }
)

# Get the query execution ID
query_execution_id = response['QueryExecutionId']

# Wait for the query to complete
query_state = 'RUNNING'
while query_state in ['RUNNING', 'QUEUED']:
    time.sleep(5)
    query_execution = athena_client.get_query_execution(QueryExecutionId=query_execution_id)
    query_state = query_execution['QueryExecution']['Status']['State']

# Check if the query was successful
if query_state == 'SUCCEEDED':
    # Initialize pagination variables
    next_token = None
    all_rows = []
    
    # Loop to paginate through results
    while True:
        # Fetch query results with pagination
        if next_token:
            results = athena_client.get_query_results(QueryExecutionId=query_execution_id, NextToken=next_token)
        else:
            results = athena_client.get_query_results(QueryExecutionId=query_execution_id)
        
        # Extract column names on the first iteration
        if not all_rows:
            column_info = results['ResultSet']['ResultSetMetadata']['ColumnInfo']
            columns = [col['Name'] for col in column_info]
        
        # Parse rows for the current page
        for row in results['ResultSet']['Rows'][1:]:  # Skip header row on the first page
            row_data = [item.get('VarCharValue', None) for item in row['Data']]
            all_rows.append(row_data)
        
        # Check if there is more data to retrieve
        next_token = results.get('NextToken')
        if not next_token:
            break

    # Convert all rows to a DataFrame
    df = pd.DataFrame(all_rows, columns=columns)
    
    # Save DataFrame to CSV
    df.to_csv('out.csv', index=False)
    print("Query results saved to 'out.csv'")
else:
    print('Query failed:', query_execution['QueryExecution']['Status']['StateChangeReason'])
