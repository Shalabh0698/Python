
import pandas as pd
import matplotlib.pyplot as plt
from sqlalchemy import create_engine
import boto3
import time
from datetime import datetime
import sqlite3
import pyodbc
import os 
athena_client = boto3.client(
    'athena',
    aws_access_key_id='Access key',
    aws_secret_access_key='Secret Key',
    region_name='Region Name'
)


# Set up parameters
database = 'default'  # Athena database
s3_output = 'S3 folder'  # S3 bucket to store query results

#sql_file_path = "select * from default.shared_order_fulfillment_nhm_fields_view_hudi limit 5;"

# Read the SQL query from a file
with open('query.sql', 'r') as file:
    sql_file_path = file.read()

start_time = datetime.now()
response = athena_client.start_query_execution(
    QueryString=sql_file_path,
    QueryExecutionContext={
        'Database': database
    },
    ResultConfiguration={
        'OutputLocation': s3_output,
    }
)

query_execution_id = response["QueryExecutionId"]
query_execution = athena_client.get_query_execution(QueryExecutionId=query_execution_id)

# Wait for the query to complete
while query_execution['QueryExecution']['Status']['State'] in ['RUNNING', 'QUEUED']:
    time.sleep(5)
    query_execution = athena_client.get_query_execution(QueryExecutionId=query_execution_id)

# Check if the query was successful
if query_execution['QueryExecution']['Status']['State'] == 'SUCCEEDED':
    # Get the query results
    results = athena_client.get_query_results(QueryExecutionId=query_execution_id)

        # Extract column names
    column_info = results['ResultSet']['ResultSetMetadata']['ColumnInfo']
    columns = [col['Name'] for col in column_info]

        # Parse rows to a list of dictionaries
    rows = []
    for row in results['ResultSet']['Rows'][1:]:  # Skip header row
        row_data = [item.get('VarCharValue', None) for item in row['Data']]
        rows.append(row_data)

        # Convert to DataFrame
    df = pd.DataFrame(rows, columns=columns)



    # Save DataFrame to CSV
    df.to_csv('out.csv', index=False)
    end_time = datetime.now()-start_time
    print("Query results saved to 'out.csv'")
else:
    print('Query failed:', query_execution['QueryExecution']['Status']['StateChangeReason'])
end_time = datetime.now() - start_time
print(end_time)


